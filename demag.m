%%程序步奏，a 直接把格点当做韦丹书中的矩形格的中点
%无输入，可以以后把晶格大小的空间步长设为输入，让其更智能
%%输出的是包含有任何两个晶格中心之间的退磁场矩阵的元胞数组，所以大小为(num1-1)(num2-1),并且自己对自己的退磁场矩阵设为零，即元胞数组的对角元素为3*3的零矩阵
function NN=demag(num)
%num=8;
%length1=1*10^(-6);%横轴长度
%length2=1*10^(-6);%纵轴长度
%num1=256;%横轴格点数
%num2=256;%纵轴格点数
%delta_x=length1/(num-1);%横轴空间间隔
delta_x=4*10^(-9);
%b=delta_x;%长方体的长
%%长方体的高待定，如果有多层 可以再调整
%delta_y=length1/(num-1);%纵轴空间间隔
delta_y=4*10^(-9);
%c=delta_y;%长方体的宽
label=zeros(3,(num)*(num));%格点是num1*num2,但形成的立方结构的中心点的个数只有(num1-1)(num2-1)，所以这样不行，因为利用fft必须格点数是2的幂次方;
label(3,:)=100*10^(-10);%假定就只有一层，即晶格的高为200埃
%==============旋转矩阵===============================================
R1=[1,0,0;0,1,0;0,0,1];
R2=[0,-1,0;1,0,0;0,0,1];
R3=[-1,0,0;0,-1,0;0,0,1];
R4=[0,1,0;-1,0,0;0,0,1];
%====================================================================
N=zeros(3,3);
%NN=cell((num1-1)*(num2-1),(num1-1)*(num2-1));%%创建空的元胞数组
NN=cell(1,num*num);%创建空的元胞数组
RR=zeros(3,1);
%====================================================================
% for i=1:(num2-1)
%     for j=1:(num1-1)
%         label(1,(i-1)*(num1-1)+j)=delta_x/2+(j-1)*delta_x;
%         label(2,(i-1)*(num1-1)+j)=delta_y/2+(i-1)*delta_y;
%     end
% end
for j=1:num
    for i=1:num
        label(1,(j-1)*(num)+i)=(i-1)*delta_x;%这里的label矩阵是分三行，每行表示所有点的一个维度的坐标，第一行表示x,第二行表示y轴
        label(2,(j-1)*(num)+i)=(j-1)*delta_y;
    end
end

% for i=1:(num1)*(num2)
%     for j=1:(num1)*(num2)
%         if j~=i
%             r1=label(i,1:3);
%             r2=label(j,1:3);
%             r=(r1-r2);
%             N=R1*fun1(R1'*r)*R1'+R2*fun1(R2'*r)*R2'+R2*fun1(R2'*r)*R2'+R2*fun1(R2'*r)*R2';
%         else
%             N=1/3*eye(3);
%         end
%         NN(i,j)={N};
%     end
% end
%%求解每一个点到第一个点的退磁矩阵，这是个常元胞，一旦点阵确定，这个元胞也就确定了
r1=label(1:3,1);
for j=2:(num)*(num)
    r2=label(1:3,j);
    r=(r1-r2);
    NNN=R1*fun1(num,R1'*r)*R1'+R2*fun1(num,R2'*r)*R2'+R3*fun1(num,R3'*r)*R3'+R4*fun1(num,R4'*r)*R4';
    NN(1,j)={NNN};
end
NN(1,1)={1/3*eye(3)};
cell2mat(NN);
%======================子程序=============================================
%输入一个向量，按韦丹专著第四章的方式求解退磁矩阵
function u=fun1(num,r)
RR=zeros(3,1);
%length1=1*10^(-6);%横轴长度
%length2=1*10^(-6);%纵轴长度
%num1=256;%横轴格点数
%num2=256;%纵轴格点数
delta_x=4*10^(-9);%横轴空间间隔
b=delta_x;%长方体的长
%%长方体的高待定，如果有多层 可以再调整
delta_y=4*10^(-9);%纵轴空间间隔
c=delta_y;%长方体的宽
    N=zeros(3,3);
    %RR=[0;b/2;c/2]+[1;q;w].*r;
   % RR_abs=sqrt(sum(RR.^2));%此处是求模，可以检查一下
    for q=-1:2:1
        for w=-1:2:1
            RR=[0;b/2;c/2]+[1;q;w].*r;
            RR_abs=sqrt(sum(RR.^2));
            N(1,1)=N(1,1) -1/(4*pi)*atan((RR(2)*RR(3))/(RR_abs*RR(1)));
            N(2,2)=N(2,2) -1/(8*pi)*q*log((RR_abs-RR(3))/(RR_abs+RR(3)));
            N(3,3)=N(3,3) -1/(8*pi)*w*log((RR_abs-RR(2))/(RR_abs+RR(2)));
        end
    end
   u=N;
